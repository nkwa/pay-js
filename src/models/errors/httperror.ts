/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type HttpErrorData = {
  details?: Array<any> | undefined;
  message?: string | undefined;
  statusCode?: number | undefined;
};

export class HttpError extends Error {
  details?: Array<any> | undefined;
  statusCode?: number | undefined;

  /** The original data that was passed to this error instance. */
  data$: HttpErrorData;

  constructor(err: HttpErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.details != null) this.details = err.details;
    if (err.statusCode != null) this.statusCode = err.statusCode;

    this.name = "HttpError";
  }
}

/** @internal */
export const HttpError$inboundSchema: z.ZodType<
  HttpError,
  z.ZodTypeDef,
  unknown
> = z.object({
  details: z.array(z.any()).optional(),
  message: z.string().optional(),
  statusCode: z.number().int().optional(),
})
  .transform((v) => {
    return new HttpError(v);
  });

/** @internal */
export type HttpError$Outbound = {
  details?: Array<any> | undefined;
  message?: string | undefined;
  statusCode?: number | undefined;
};

/** @internal */
export const HttpError$outboundSchema: z.ZodType<
  HttpError$Outbound,
  z.ZodTypeDef,
  HttpError
> = z.instanceof(HttpError)
  .transform(v => v.data$)
  .pipe(z.object({
    details: z.array(z.any()).optional(),
    message: z.string().optional(),
    statusCode: z.number().int().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HttpError$ {
  /** @deprecated use `HttpError$inboundSchema` instead. */
  export const inboundSchema = HttpError$inboundSchema;
  /** @deprecated use `HttpError$outboundSchema` instead. */
  export const outboundSchema = HttpError$outboundSchema;
  /** @deprecated use `HttpError$Outbound` instead. */
  export type Outbound = HttpError$Outbound;
}
