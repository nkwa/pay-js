/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaymentStatus,
  PaymentStatus$inboundSchema,
  PaymentStatus$outboundSchema,
} from "./paymentstatus.js";
import {
  PaymentType,
  PaymentType$inboundSchema,
  PaymentType$outboundSchema,
} from "./paymenttype.js";
import {
  TelecomOperator,
  TelecomOperator$inboundSchema,
  TelecomOperator$outboundSchema,
} from "./telecomoperator.js";

export type Payment = {
  amount?: number | undefined;
  createdAt?: string | undefined;
  currency?: string | undefined;
  description?: string | undefined;
  fee?: number | undefined;
  id?: string | undefined;
  merchantId?: number | undefined;
  paymentType?: PaymentType | undefined;
  phoneNumber?: string | undefined;
  status?: PaymentStatus | undefined;
  telecomOperator?: TelecomOperator | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const Payment$inboundSchema: z.ZodType<Payment, z.ZodTypeDef, unknown> =
  z.object({
    amount: z.number().int().optional(),
    createdAt: z.string().optional(),
    currency: z.string().optional(),
    description: z.string().optional(),
    fee: z.number().int().optional(),
    id: z.string().optional(),
    merchantId: z.number().int().optional(),
    paymentType: PaymentType$inboundSchema.optional(),
    phoneNumber: z.string().optional(),
    status: PaymentStatus$inboundSchema.optional(),
    telecomOperator: TelecomOperator$inboundSchema.optional(),
    updatedAt: z.string().optional(),
  });

/** @internal */
export type Payment$Outbound = {
  amount?: number | undefined;
  createdAt?: string | undefined;
  currency?: string | undefined;
  description?: string | undefined;
  fee?: number | undefined;
  id?: string | undefined;
  merchantId?: number | undefined;
  paymentType?: string | undefined;
  phoneNumber?: string | undefined;
  status?: string | undefined;
  telecomOperator?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const Payment$outboundSchema: z.ZodType<
  Payment$Outbound,
  z.ZodTypeDef,
  Payment
> = z.object({
  amount: z.number().int().optional(),
  createdAt: z.string().optional(),
  currency: z.string().optional(),
  description: z.string().optional(),
  fee: z.number().int().optional(),
  id: z.string().optional(),
  merchantId: z.number().int().optional(),
  paymentType: PaymentType$outboundSchema.optional(),
  phoneNumber: z.string().optional(),
  status: PaymentStatus$outboundSchema.optional(),
  telecomOperator: TelecomOperator$outboundSchema.optional(),
  updatedAt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Payment$ {
  /** @deprecated use `Payment$inboundSchema` instead. */
  export const inboundSchema = Payment$inboundSchema;
  /** @deprecated use `Payment$outboundSchema` instead. */
  export const outboundSchema = Payment$outboundSchema;
  /** @deprecated use `Payment$Outbound` instead. */
  export type Outbound = Payment$Outbound;
}

export function paymentToJSON(payment: Payment): string {
  return JSON.stringify(Payment$outboundSchema.parse(payment));
}

export function paymentFromJSON(
  jsonString: string,
): SafeParseResult<Payment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Payment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Payment' from JSON`,
  );
}
