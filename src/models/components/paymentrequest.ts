/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PaymentRequest = {
  amount: number;
  phoneNumber: string;
};

/** @internal */
export const PaymentRequest$inboundSchema: z.ZodType<
  PaymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().int(),
  phoneNumber: z.string(),
});

/** @internal */
export type PaymentRequest$Outbound = {
  amount: number;
  phoneNumber: string;
};

/** @internal */
export const PaymentRequest$outboundSchema: z.ZodType<
  PaymentRequest$Outbound,
  z.ZodTypeDef,
  PaymentRequest
> = z.object({
  amount: z.number().int(),
  phoneNumber: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentRequest$ {
  /** @deprecated use `PaymentRequest$inboundSchema` instead. */
  export const inboundSchema = PaymentRequest$inboundSchema;
  /** @deprecated use `PaymentRequest$outboundSchema` instead. */
  export const outboundSchema = PaymentRequest$outboundSchema;
  /** @deprecated use `PaymentRequest$Outbound` instead. */
  export type Outbound = PaymentRequest$Outbound;
}

export function paymentRequestToJSON(paymentRequest: PaymentRequest): string {
  return JSON.stringify(PaymentRequest$outboundSchema.parse(paymentRequest));
}

export function paymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<PaymentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentRequest' from JSON`,
  );
}
