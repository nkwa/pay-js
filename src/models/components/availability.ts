/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Operator = {
  Mtn: "mtn",
  Orange: "orange",
} as const;
export type Operator = ClosedEnum<typeof Operator>;

export const Type = {
  Collection: "collection",
  Disbursement: "disbursement",
} as const;
export type Type = ClosedEnum<typeof Type>;

export const Status = {
  Operational: "OPERATIONAL",
  Suspended: "SUSPENDED",
} as const;
export type Status = ClosedEnum<typeof Status>;

export type Operation = {
  type?: Type | undefined;
  status?: Status | undefined;
};

export type Availability = {
  operator?: Operator | undefined;
  operation?: Operation | undefined;
};

/** @internal */
export const Operator$inboundSchema: z.ZodNativeEnum<typeof Operator> = z
  .nativeEnum(Operator);

/** @internal */
export const Operator$outboundSchema: z.ZodNativeEnum<typeof Operator> =
  Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator$ {
  /** @deprecated use `Operator$inboundSchema` instead. */
  export const inboundSchema = Operator$inboundSchema;
  /** @deprecated use `Operator$outboundSchema` instead. */
  export const outboundSchema = Operator$outboundSchema;
}

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const Operation$inboundSchema: z.ZodType<
  Operation,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: Type$inboundSchema.optional(),
  status: Status$inboundSchema.optional(),
});

/** @internal */
export type Operation$Outbound = {
  type?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const Operation$outboundSchema: z.ZodType<
  Operation$Outbound,
  z.ZodTypeDef,
  Operation
> = z.object({
  type: Type$outboundSchema.optional(),
  status: Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operation$ {
  /** @deprecated use `Operation$inboundSchema` instead. */
  export const inboundSchema = Operation$inboundSchema;
  /** @deprecated use `Operation$outboundSchema` instead. */
  export const outboundSchema = Operation$outboundSchema;
  /** @deprecated use `Operation$Outbound` instead. */
  export type Outbound = Operation$Outbound;
}

export function operationToJSON(operation: Operation): string {
  return JSON.stringify(Operation$outboundSchema.parse(operation));
}

export function operationFromJSON(
  jsonString: string,
): SafeParseResult<Operation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Operation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Operation' from JSON`,
  );
}

/** @internal */
export const Availability$inboundSchema: z.ZodType<
  Availability,
  z.ZodTypeDef,
  unknown
> = z.object({
  operator: Operator$inboundSchema.optional(),
  operation: z.lazy(() => Operation$inboundSchema).optional(),
});

/** @internal */
export type Availability$Outbound = {
  operator?: string | undefined;
  operation?: Operation$Outbound | undefined;
};

/** @internal */
export const Availability$outboundSchema: z.ZodType<
  Availability$Outbound,
  z.ZodTypeDef,
  Availability
> = z.object({
  operator: Operator$outboundSchema.optional(),
  operation: z.lazy(() => Operation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Availability$ {
  /** @deprecated use `Availability$inboundSchema` instead. */
  export const inboundSchema = Availability$inboundSchema;
  /** @deprecated use `Availability$outboundSchema` instead. */
  export const outboundSchema = Availability$outboundSchema;
  /** @deprecated use `Availability$Outbound` instead. */
  export type Outbound = Availability$Outbound;
}

export function availabilityToJSON(availability: Availability): string {
  return JSON.stringify(Availability$outboundSchema.parse(availability));
}

export function availabilityFromJSON(
  jsonString: string,
): SafeParseResult<Availability, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Availability$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Availability' from JSON`,
  );
}
